{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  getFontDefinitionFromNetwork: null,\n  getFontDefinitionFromManifest: null,\n  calculateOverrideValues: null,\n  calculateSizeAdjustValues: null,\n  getFontOverrideCss: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  getFontDefinitionFromNetwork: function () {\n    return getFontDefinitionFromNetwork;\n  },\n  getFontDefinitionFromManifest: function () {\n    return getFontDefinitionFromManifest;\n  },\n  calculateOverrideValues: function () {\n    return calculateOverrideValues;\n  },\n  calculateSizeAdjustValues: function () {\n    return calculateSizeAdjustValues;\n  },\n  getFontOverrideCss: function () {\n    return getFontOverrideCss;\n  }\n});\nconst _log = /*#__PURE__*/_interop_require_wildcard(require(\"../build/output/log\"));\nconst _constants = require(\"../shared/lib/constants\");\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interop_require_wildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nconst capsizeFontsMetrics = require(\"next/dist/server/capsize-font-metrics.json\");\nconst https = require(\"https\");\nconst CHROME_UA = \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36\";\nconst IE_UA = \"Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko\";\nfunction isGoogleFont(url) {\n  return url.startsWith(_constants.GOOGLE_FONT_PROVIDER);\n}\nfunction getFontForUA(url, UA) {\n  return new Promise((resolve, reject) => {\n    let rawData = \"\";\n    https.get(url, {\n      headers: {\n        \"user-agent\": UA\n      }\n    }, res => {\n      res.on(\"data\", chunk => {\n        rawData += chunk;\n      });\n      res.on(\"end\", () => {\n        resolve(rawData.toString(\"utf8\"));\n      });\n    }).on(\"error\", e => {\n      reject(e);\n    });\n  });\n}\nasync function getFontDefinitionFromNetwork(url) {\n  let result = \"\";\n  /**\n  * The order of IE -> Chrome is important, other wise chrome starts loading woff1.\n  * CSS cascading 🤷‍♂️.\n  */\n  try {\n    if (isGoogleFont(url)) {\n      result += await getFontForUA(url, IE_UA);\n    }\n    result += await getFontForUA(url, CHROME_UA);\n  } catch (e) {\n    _log.warn(`Failed to download the stylesheet for ${url}. Skipped optimizing this font.`);\n    return \"\";\n  }\n  return result;\n}\nfunction getFontDefinitionFromManifest(url, manifest) {\n  var _manifest_find;\n  return ((_manifest_find = manifest.find(font => {\n    if (font && font.url === url) {\n      return true;\n    }\n    return false;\n  })) == null ? void 0 : _manifest_find.content) || \"\";\n}\nfunction parseGoogleFontName(css) {\n  const regex = /font-family: ([^;]*)/g;\n  const matches = css.matchAll(regex);\n  const fontNames = new Set();\n  for (let font of matches) {\n    const fontFamily = font[1].replace(/^['\"]|['\"]$/g, \"\");\n    fontNames.add(fontFamily);\n  }\n  return [...fontNames];\n}\nfunction formatName(str) {\n  return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (word, index) {\n    return index === 0 ? word.toLowerCase() : word.toUpperCase();\n  }).replace(/\\s+/g, \"\");\n}\nfunction formatOverrideValue(val) {\n  return Math.abs(val * 100).toFixed(2);\n}\nfunction calculateOverrideValues(fontName) {\n  const fontKey = formatName(fontName);\n  const fontMetrics = capsizeFontsMetrics[fontKey];\n  let {\n    category,\n    ascent,\n    descent,\n    lineGap,\n    unitsPerEm\n  } = fontMetrics;\n  const fallbackFont = category === \"serif\" ? _constants.DEFAULT_SERIF_FONT : _constants.DEFAULT_SANS_SERIF_FONT;\n  ascent = formatOverrideValue(ascent / unitsPerEm);\n  descent = formatOverrideValue(descent / unitsPerEm);\n  lineGap = formatOverrideValue(lineGap / unitsPerEm);\n  return {\n    ascent,\n    descent,\n    lineGap,\n    fallbackFont: fallbackFont.name\n  };\n}\nfunction calculateSizeAdjustValues(fontName) {\n  const fontKey = formatName(fontName);\n  const fontMetrics = capsizeFontsMetrics[fontKey];\n  let {\n    category,\n    ascent,\n    descent,\n    lineGap,\n    unitsPerEm,\n    xWidthAvg\n  } = fontMetrics;\n  const mainFontAvgWidth = xWidthAvg / unitsPerEm;\n  const fallbackFont = category === \"serif\" ? _constants.DEFAULT_SERIF_FONT : _constants.DEFAULT_SANS_SERIF_FONT;\n  const fallbackFontName = formatName(fallbackFont.name);\n  const fallbackFontMetrics = capsizeFontsMetrics[fallbackFontName];\n  const fallbackFontAvgWidth = fallbackFontMetrics.xWidthAvg / fallbackFontMetrics.unitsPerEm;\n  let sizeAdjust = xWidthAvg ? mainFontAvgWidth / fallbackFontAvgWidth : 1;\n  ascent = formatOverrideValue(ascent / (unitsPerEm * sizeAdjust));\n  descent = formatOverrideValue(descent / (unitsPerEm * sizeAdjust));\n  lineGap = formatOverrideValue(lineGap / (unitsPerEm * sizeAdjust));\n  return {\n    ascent,\n    descent,\n    lineGap,\n    fallbackFont: fallbackFont.name,\n    sizeAdjust: formatOverrideValue(sizeAdjust)\n  };\n}\nfunction calculateOverrideCSS(font) {\n  const fontName = font.trim();\n  const {\n    ascent,\n    descent,\n    lineGap,\n    fallbackFont\n  } = calculateOverrideValues(fontName);\n  return `\n    @font-face {\n      font-family: \"${fontName} Fallback\";\n      ascent-override: ${ascent}%;\n      descent-override: ${descent}%;\n      line-gap-override: ${lineGap}%;\n      src: local(\"${fallbackFont}\");\n    }\n  `;\n}\nfunction calculateSizeAdjustCSS(font) {\n  const fontName = font.trim();\n  const {\n    ascent,\n    descent,\n    lineGap,\n    fallbackFont,\n    sizeAdjust\n  } = calculateSizeAdjustValues(fontName);\n  return `\n    @font-face {\n      font-family: \"${fontName} Fallback\";\n      ascent-override: ${ascent}%;\n      descent-override: ${descent}%;\n      line-gap-override: ${lineGap}%;\n      size-adjust: ${sizeAdjust}%;\n      src: local(\"${fallbackFont}\");\n    }\n  `;\n}\nfunction getFontOverrideCss(url, css, useSizeAdjust = false) {\n  if (!isGoogleFont(url)) {\n    return \"\";\n  }\n  const calcFn = useSizeAdjust ? calculateSizeAdjustCSS : calculateOverrideCSS;\n  try {\n    const fontNames = parseGoogleFontName(css);\n    const fontCss = fontNames.reduce((cssStr, fontName) => {\n      cssStr += calcFn(fontName);\n      return cssStr;\n    }, \"\");\n    return fontCss;\n  } catch (e) {\n    console.log(\"Error getting font override values - \", e);\n    return \"\";\n  }\n}","map":{"version":3,"names":["getFontDefinitionFromNetwork","getFontDefinitionFromManifest","calculateOverrideValues","calculateSizeAdjustValues","getFontOverrideCss","capsizeFontsMetrics","require","https","CHROME_UA","IE_UA","isGoogleFont","url","startsWith","_constants","GOOGLE_FONT_PROVIDER","getFontForUA","UA","Promise","resolve","reject","rawData","get","headers","res","on","chunk","toString","e","result","_log","warn","manifest","_manifest_find","find","font","content","parseGoogleFontName","css","regex","matches","matchAll","fontNames","Set","fontFamily","replace","add","formatName","str","word","index","toLowerCase","toUpperCase","formatOverrideValue","val","Math","abs","toFixed","fontName","fontKey","fontMetrics","category","ascent","descent","lineGap","unitsPerEm","fallbackFont","DEFAULT_SERIF_FONT","DEFAULT_SANS_SERIF_FONT","name","xWidthAvg","mainFontAvgWidth","fallbackFontName","fallbackFontMetrics","fallbackFontAvgWidth","sizeAdjust","calculateOverrideCSS","trim","calculateSizeAdjustCSS","useSizeAdjust","calcFn","fontCss","reduce","cssStr","console","log"],"sources":["../../src/server/font-utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}